function [thetime,thecode]=FitzTrig_StimTriggerAct(myDev,theaction,code,code2)% FitzTrig_STIMTRIGGERACTION Performs triggering action PCIDIO96%%  Performs triggering action for StimPCIDIO96 for use with FitzStim4%%StimPCIDIO96Globals;thetime = []; thecode = [];switch theaction,	case 'Stim_beforeframe_trigger',        DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.VdaqUserInPort,NSPCIDIO96.vontrigger);		thetime = GetSecs;	case 'Stim_afterframe_trigger',        DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.VdaqUserInPort,NSPCIDIO96.vofftrigger);		thetime = GetSecs;	case 'Stim_ONSET_trigger',		if myDev.parameters.triggerStimOnset,			StimCodeA=bitshift(bitand(code,65280),-8);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInAPort,StimCodeA+NSPCIDIO96.CEDstimtrigger);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.VdaqUserInPort,NSPCIDIO96.sandvtrigger);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInAPort,StimCodeA);			%should probably wait 1ms here			waitsecs(0.001);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInCPort,NSPCIDIO96.CEDeventtriggeroff);		end;		thetime = GetSecs;	case 'Stim_BGpre_trigger',		StimCodeB=bitand(code,255);		DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInBPort,StimCodeB);		if ~myDev.parameters.triggerStimOnset,			StimCodeA=bitshift(bitand(code,65280),-8);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInAPort,StimCodeA+NSPCIDIO96.CEDstimtrigger);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.VdaqUserInPort,NSPCIDIO96.sandvtrigger);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInAPort,StimCodeA);			%should probably wait 1ms here			waitsecs(0.001);			DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInCPort,NSPCIDIO96.CEDeventtriggeroff);		end;		thetime = GetSecs;	case 'Stim_BGpost_trigger',%         DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInCPort,NSPCIDIO96.CEDeventtriggeron);%         DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInAPort,0);  % clear port, event needs transition.%         DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInBPort,0);  % clear both ports, just for symmetry.		thetime = GetSecs;	case 'Stim_OFFSET_trigger',        DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInCPort,NSPCIDIO96.CEDeventtriggeron);        DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInAPort,0);  % clear port, event needs transition.        DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInBPort,0);  % clear both ports, just for symmetry.		thetime = GetSecs;	case 'Script_Start_trigger',        DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInCPort,NSPCIDIO96.CEDeventtriggeron);		thetime = GetSecs;	case 'Script_Stop_trigger',		thetime = GetSecs;	case 'Trigger_Initialize',		DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInCPort,NSPCIDIO96.CEDeventtriggeron);		StimCodeB=bitand(0,255);StimCodeA=bitshift(bitand(0,65280),-8);		DIG_Out_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.CEDdigitalInBPort,StimCodeB);		thetime = GetSecs;	case 'WaitActionCode',		fprintf('waiting for gobit>');		VDAQ_Response = 0;		while (VDAQ_Response==0)&~KbCheck,			[VdaqUserBByteIn,error]=DIG_In_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.VdaqUserOutBPort);			VDAQ_Response = bitget(VdaqUserBByteIn,7);  % 7 is go bit		end;		[VdaqStimByteIn, error] = DIG_In_Port(NSPCIDIO96.deviceNumber,NSPCIDIO96.VdaqStimOutPort);		thecode=double(bitget(VdaqStimByteIn,7)*1+bitget(VdaqStimByteIn,6)*2+bitget(VdaqStimByteIn,5)*4+bitget(VdaqStimByteIn,4)*8+bitget(VdaqStimByteIn,3)*16),		thetime = GetSecs;	otherwise,end;